name: CI

on:
  push:
    branches-ignore: [deploy]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust-version: ['1.65.0', 'stable']

    steps:
    - name: Checkout scallop
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/scallop
        path: scallop
        submodules: true

    - name: Checkout pkgcraft
      uses: actions/checkout@v3
      with:
        path: pkgcraft
        submodules: true

    - name: Get bash submodule status
      working-directory: scallop/bash
      run: echo "SCALLOP_BASH=$(git describe --always --dirty)" >> $GITHUB_ENV

    - name: Set up rust toolchain
      uses: dtolnay/rust-toolchain@master
      id: rust
      with:
        toolchain: ${{ matrix.rust-version }}

    - name: Set up rust cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.cachekey }}
        restore-keys: ${{ github.job }}-${{ runner.os }}-rust-

    - name: Install cargo-nextest
      uses: taiki-e/install-action@nextest

    - name: Build and test
      run: cargo nextest run --color always --all-features --manifest-path=pkgcraft/Cargo.toml --target-dir target

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout scallop
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/scallop
        path: scallop
        submodules: true

    - name: Checkout pkgcraft
      uses: actions/checkout@v3
      with:
        path: pkgcraft
        submodules: true

    - name: Get bash submodule status
      working-directory: scallop/bash
      run: echo "SCALLOP_BASH=$(git describe --always --dirty)" >> $GITHUB_ENV

    - name: Set up rust toolchain
      uses: dtolnay/rust-toolchain@stable
      id: rust
      with:
        components: clippy, rustfmt

    - name: Set up rust cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.cachekey }}
        restore-keys: ${{ github.job }}-${{ runner.os }}-rust-

    - name: Run rustfmt
      run: cargo fmt --check --manifest-path=pkgcraft/Cargo.toml

    - name: Run clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --manifest-path=pkgcraft/Cargo.toml --target-dir target

  bench:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout scallop
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/scallop
        path: scallop
        submodules: true

    - name: Checkout pkgcraft
      uses: actions/checkout@v3
      with:
        path: pkgcraft
        submodules: true

    - name: Get bash submodule status
      working-directory: scallop/bash
      run: echo "SCALLOP_BASH=$(git describe --always --dirty)" >> $GITHUB_ENV

    - name: Set up rust toolchain
      uses: dtolnay/rust-toolchain@stable
      id: rust

    - name: Set up rust cache
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.cachekey }}
        restore-keys: ${{ github.job }}-${{ runner.os }}-rust-

    - name: Install cargo-criterion
      run: |
        # ignore return value since `cargo install` errors out when already installed
        cargo install cargo-criterion || true

    - name: Build
      run: cargo criterion --no-run --manifest-path=pkgcraft/Cargo.toml --target-dir target

    - name: Benchmark
      if: github.ref_name == 'bench'
      run: cargo criterion --color always --output-format quiet --manifest-path=pkgcraft/Cargo.toml
