use std::cmp::Ordering;

use once_cell::sync::Lazy;
use pkgcraft::macros::cmp_not_equal;
use pkgcraft::pkg::ebuild;
use pkgcraft::repo::ebuild::Repo;
use pkgcraft::types::{OrderedMap, OrderedSet};
use strum::{AsRefStr, Display, EnumIter, EnumString, IntoEnumIterator, VariantNames};

use crate::report::{Report, ReportKind};
use crate::scope::Scope;
use crate::source::SourceKind;

mod dependency;
mod dropped_keywords;
mod eapi;
mod keywords;
mod metadata;
mod unstable_only;

/// Check variants.
#[derive(
    AsRefStr,
    Display,
    EnumIter,
    EnumString,
    VariantNames,
    Debug,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Copy,
    Clone,
)]
pub enum CheckKind {
    Dependency,
    DroppedKeywords,
    Eapi,
    Keywords,
    Metadata,
    UnstableOnly,
}

impl CheckKind {
    /// The priority of the check for enabling a deterministic running order.
    fn priority(&self) -> i64 {
        match self {
            Self::Metadata => -9999,
            _ => 0,
        }
    }

    /// Compare check variants by priority, then by name.
    pub(crate) fn prioritized(left: &Self, right: &Self) -> Ordering {
        cmp_not_equal!(&left.priority(), &right.priority());
        left.cmp(right)
    }

    /// The scope the check runs in.
    pub fn scope(&self) -> Scope {
        match self {
            Self::Dependency => Scope::Version,
            Self::DroppedKeywords => Scope::Package,
            Self::Eapi => Scope::Version,
            Self::Keywords => Scope::Version,
            Self::Metadata => Scope::Version,
            Self::UnstableOnly => Scope::Package,
        }
    }

    /// The source of the values the check runs against.
    pub fn source(&self) -> SourceKind {
        match self {
            Self::Dependency => SourceKind::Ebuild,
            Self::DroppedKeywords => SourceKind::Ebuild,
            Self::Eapi => SourceKind::Ebuild,
            Self::Keywords => SourceKind::Ebuild,
            Self::Metadata => SourceKind::EbuildRaw,
            Self::UnstableOnly => SourceKind::Ebuild,
        }
    }

    /// All the potential report variants generated by the check.
    pub fn reports(self) -> &'static [ReportKind] {
        match self {
            Self::Dependency => dependency::REPORTS,
            Self::DroppedKeywords => dropped_keywords::REPORTS,
            Self::Eapi => eapi::REPORTS,
            Self::Keywords => keywords::REPORTS,
            Self::Metadata => metadata::REPORTS,
            Self::UnstableOnly => unstable_only::REPORTS,
        }
    }

    /// Create a check runner for a given variant.
    pub(crate) fn create(self, repo: &Repo) -> Check {
        use Check::*;
        match self {
            Self::Dependency => Dependency(dependency::Check::new(repo)),
            Self::DroppedKeywords => DroppedKeywords(dropped_keywords::Check::new(repo)),
            Self::Eapi => Eapi(eapi::Check::new(repo)),
            Self::Keywords => Keywords(keywords::Check::new(repo)),
            Self::Metadata => Metadata(metadata::Check::new(repo)),
            Self::UnstableOnly => UnstableOnly(unstable_only::Check::new(repo)),
        }
    }
}

/// Check runner variants.
#[derive(AsRefStr, Display, Debug)]
pub(crate) enum Check<'a> {
    Dependency(dependency::Check<'a>),
    DroppedKeywords(dropped_keywords::Check<'a>),
    Eapi(eapi::Check<'a>),
    Keywords(keywords::Check<'a>),
    Metadata(metadata::Check<'a>),
    UnstableOnly(unstable_only::Check<'a>),
}

impl<'a> Check<'a> {
    pub(crate) fn kind(&self) -> CheckKind {
        self.as_ref()
            .parse()
            .unwrap_or_else(|_| panic!("{self} name doesn't match CheckKind"))
    }
}

impl<'a> CheckRun<&ebuild::Pkg<'a>> for Check<'a> {
    fn run<F: FnMut(Report)>(&self, pkg: &ebuild::Pkg<'a>, report: F) {
        match self {
            Self::Dependency(c) => c.run(pkg, report),
            Self::Eapi(c) => c.run(pkg, report),
            Self::Keywords(c) => c.run(pkg, report),
            _ => unreachable!("{self} is not an ebuild check"),
        }
    }
}

impl<'a> CheckRun<&ebuild::raw::Pkg<'a>> for Check<'a> {
    fn run<F: FnMut(Report)>(&self, pkg: &ebuild::raw::Pkg<'a>, report: F) {
        match self {
            Self::Metadata(c) => c.run(pkg, report),
            _ => unreachable!("{self} is not a raw ebuild check"),
        }
    }
}

impl<'a> CheckRun<&[ebuild::Pkg<'a>]> for Check<'a> {
    fn run<F: FnMut(Report)>(&self, pkgs: &[ebuild::Pkg<'a>], report: F) {
        match self {
            Self::DroppedKeywords(c) => c.run(pkgs, report),
            Self::UnstableOnly(c) => c.run(pkgs, report),
            _ => unreachable!("{self} is not an ebuild pkg set check"),
        }
    }
}

/// Run a check for a given item sending back any generated reports.
pub(crate) trait CheckRun<T> {
    fn run<F: FnMut(Report)>(&self, item: T, report: F);
}

/// The ordered map of all report variants to the checks that can generate them.
pub static REPORT_CHECKS: Lazy<OrderedMap<ReportKind, OrderedSet<CheckKind>>> = Lazy::new(|| {
    let mut map: OrderedMap<_, OrderedSet<_>> = CheckKind::iter()
        .flat_map(|c| c.reports().iter().copied().map(move |r| (r, c)))
        .collect();
    map.sort_keys();
    map
});

/// The ordered map of all source variants to the checks that use them.
pub static SOURCE_CHECKS: Lazy<OrderedMap<SourceKind, OrderedSet<CheckKind>>> = Lazy::new(|| {
    let mut map: OrderedMap<_, OrderedSet<_>> =
        CheckKind::iter().map(|c| (c.source(), c)).collect();
    map.sort_keys();
    map
});
